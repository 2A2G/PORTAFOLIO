---
import { readFile } from "fs/promises";
import path from "path";
import { getGitHubRepos } from "../ultils/github";

const dataFilePath = path.resolve("./public/data/About.data.json");
let data = [];
let repos = [];

// Cargar el archivo JSON y obtener los repositorios de GitHub
try {
  const rawData = await readFile(dataFilePath, "utf-8");
  data = JSON.parse(rawData);

  const username = "2A2G";
  repos = await getGitHubRepos(username);
} catch (error) {
  console.error("Error al cargar los datos:", error);
}

const getRepoLanguages = async (repo) => {
  const languagesResponse = await fetch(repo.languages_url);
  if (!languagesResponse.ok) {
    console.error(
      `Error al obtener los lenguajes para el repositorio ${repo.name}`
    );
    return [];
  }
  const languages = await languagesResponse.json();
  return Object.keys(languages);
};

const languageImages = {
  Astro: "https://brandonroberts.dev/assets/posts/astro-logo.jpg",
  Java: "https://codersfree.nyc3.cdn.digitaloceanspaces.com/posts/operadores-relacionales-en-java.jpg",
  PHP: "https://victorroblesweb.es/wp-content/uploads/2016/05/PHP_Logo.png",
  NODE: "https://ih1.redbubble.net/image.241202237.4263/st,small,507x507-pad,600x600,f8f8f8.u28.jpg",
};
const colors = [
  "bg-cyan-500",
  "bg-indigo-500",
  "bg-purple-500",
  "bg-green-500",
  "bg-blue-500",
  "bg-yellow-500",
];

const getRepoImage = (languages) => {
  const priorityLanguages = ["PHP", "Astro", "Java", "NODE"];

  for (const language of priorityLanguages) {
    if (languages.includes(language)) {
      return languageImages[language];
    }
  }

  return "https://devsoft.io/wp-content/uploads/2021/05/mejores-lenguajes-de-programacion-2018.jpg";
};
---

<script
  src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-element-bundle.min.js"
  defer></script>
<!-- Repositorios de GitHub -->
<div class="relative py-16">
  <swiper-container
    class="swiper-container"
    loop="true"
    slides-per-view="3"
    centered-slides="true"
    space-between="20"
    pagination="false"
    autoplay-delay="3000"
    autoplay-disable-on-interaction="false"
    effect="coverflow"
    coverflow-effect-rotate="0"
    coverflow-effect-stretch="70"
    coverflow-effect-depth="150"
    coverflow-effect-modifier="1"
  >
    {
      repos.map(async (repo) => {
        const languages = await getRepoLanguages(repo);
        const repoImage = getRepoImage(languages);
        return (
          <swiper-slide
            key={repo.id}
            class="swiper-slide flex flex-col items-center w-3/4 h-full p-8 bg-white border rounded-2xl shadow-2xl cursor-pointer transition-transform duration-300 hover:scale-105"
          >
            <a
              href={repo.html_url}
              class="mt-4 text-blue-500 hover:text-blue-700 block"
              target="_blank"
              rel="noopener noreferrer"
            >
              <img
                src={repoImage}
                class="w-40 h-40 rounded-full mb-6"
                alt="Project Image"
              />
              <h3 class="text-3xl font-bold break-words max-w-full">
                {repo.name}
              </h3>
              <p class="text-lg text-gray-600 text-center overflow-hidden text-ellipsis line-clamp-3">
                {repo.description || "No description available."}
              </p>
              <br />
              <div className="flex flex-wrap gap-2 mt-4">
                {languages.map((language, index) => (
                  <span
                    key={language}
                    className={`${colors[index % colors.length]} text-white py-1 px-2 rounded-full`}
                  >
                    {language}
                  </span>
                ))}
              </div>
            </a>
          </swiper-slide>
        );
      })
    }
  </swiper-container>
</div>
